// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartSchool.Schema;

#nullable disable

namespace SmartSchool.Schema.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241111075917_AddVerificationColumns")]
    partial class AddVerificationColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SmartSchool.Schema.Entities.AcademicYear", b =>
                {
                    b.Property<int>("Year")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Year"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Year");

                    b.ToTable("AcademicYears");

                    b.HasData(
                        new
                        {
                            Year = 1998,
                            EndDate = new DateOnly(1998, 12, 31),
                            StartDate = new DateOnly(1998, 1, 1)
                        },
                        new
                        {
                            Year = 1999,
                            EndDate = new DateOnly(1999, 12, 31),
                            StartDate = new DateOnly(1999, 1, 1)
                        },
                        new
                        {
                            Year = 2024,
                            EndDate = new DateOnly(2024, 12, 31),
                            StartDate = new DateOnly(2024, 1, 1)
                        },
                        new
                        {
                            Year = 2025,
                            EndDate = new DateOnly(2025, 12, 31),
                            StartDate = new DateOnly(2025, 1, 1)
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Grade = (byte)1,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 2L,
                            Grade = (byte)2,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 3L,
                            Grade = (byte)3,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 4L,
                            Grade = (byte)4,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 5L,
                            Grade = (byte)5,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 6L,
                            Grade = (byte)6,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 7L,
                            Grade = (byte)7,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 8L,
                            Grade = (byte)8,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        },
                        new
                        {
                            Id = 9L,
                            Grade = (byte)9,
                            LanguageCode = "ta",
                            SchoolId = 1L,
                            Section = "A"
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.ClassStudentEnrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AcademicYearYear")
                        .HasColumnType("int");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("RemoveReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RemovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RollNo")
                        .HasColumnType("int");

                    b.Property<long>("SchoolStudentEnrollmentId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearYear");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("SchoolStudentEnrollmentId");

                    b.ToTable("ClassStudentEnrollments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AcademicYearYear = 1999,
                            ClassId = 1L,
                            SchoolStudentEnrollmentId = 1L,
                            Status = (byte)4
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.ClassTeacherEnrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AcademicYearYear")
                        .HasColumnType("int");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("RemovedReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RemovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolTeacherEnrollmentId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearYear");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("SchoolTeacherEnrollmentId");

                    b.ToTable("ClassTeacherEnrollments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AcademicYearYear = 1998,
                            ClassId = 6L,
                            SchoolTeacherEnrollmentId = 1L,
                            Status = (byte)5
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("SinhalaName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TamilName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Colombo",
                            ProvinceId = 1,
                            SinhalaName = "කොළඹ",
                            TamilName = "கொழும்பு"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gampaha",
                            ProvinceId = 1,
                            SinhalaName = "ගම්පහ",
                            TamilName = "கம்பகா"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kalutara",
                            ProvinceId = 1,
                            SinhalaName = "කළුතර",
                            TamilName = "களுத்துறை"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kandy",
                            ProvinceId = 2,
                            SinhalaName = "මහනුවර",
                            TamilName = "கண்டி"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Matale",
                            ProvinceId = 2,
                            SinhalaName = "මාතලේ",
                            TamilName = "மாத்தளை"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Nuwara Eliya",
                            ProvinceId = 2,
                            SinhalaName = "නුවරඑළිය",
                            TamilName = "நுவரெலியா"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Galle",
                            ProvinceId = 3,
                            SinhalaName = "ගාල්ල",
                            TamilName = "காலி"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Matara",
                            ProvinceId = 3,
                            SinhalaName = "මාතර",
                            TamilName = "மாத்தறை"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hambantota",
                            ProvinceId = 3,
                            SinhalaName = "හම්බන්තොට",
                            TamilName = "அம்பாந்தோட்டை"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jaffna",
                            ProvinceId = 4,
                            SinhalaName = "යාපනය",
                            TamilName = "யாழ்ப்பாணம்"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Mannar",
                            ProvinceId = 4,
                            SinhalaName = "මන්නාරම",
                            TamilName = "மன்னார்"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Vavuniya",
                            ProvinceId = 4,
                            SinhalaName = "වවුනියාව",
                            TamilName = "வவுனியா"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Mullativu",
                            ProvinceId = 4,
                            SinhalaName = "මුලතිව්",
                            TamilName = "முல்லைத்தீவு"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Killinochchi",
                            ProvinceId = 4,
                            SinhalaName = "කිලිනොච්චිය",
                            TamilName = "கிளிநொச்சி"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Batticaloa",
                            ProvinceId = 5,
                            SinhalaName = "මඩකලපුව",
                            TamilName = "மட்டக்களப்பு"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Ampara",
                            ProvinceId = 5,
                            SinhalaName = "අම්පාර",
                            TamilName = "அம்பாறை"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Trincomalee",
                            ProvinceId = 5,
                            SinhalaName = "ත්‍රිකුණාමල",
                            TamilName = "திருகோணமலை"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kurunegala",
                            ProvinceId = 6,
                            SinhalaName = "කුරුණෑගල",
                            TamilName = "குருநாகல்"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Puttalam",
                            ProvinceId = 6,
                            SinhalaName = "පුත්තලම",
                            TamilName = "புத்தளம்"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Anuradhapura",
                            ProvinceId = 7,
                            SinhalaName = "අනුරාධපුර",
                            TamilName = "அனுராதபுரம்"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Polonnaruwa",
                            ProvinceId = 7,
                            SinhalaName = "පොලොන්නරු",
                            TamilName = "பொலநறுவை"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Badulla",
                            ProvinceId = 8,
                            SinhalaName = "බදුල්ල",
                            TamilName = "பதுளை"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Moneragala",
                            ProvinceId = 8,
                            SinhalaName = "මොණරාගල",
                            TamilName = "மொனராகலை"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Ratnapura",
                            ProvinceId = 9,
                            SinhalaName = "රත්නපුර",
                            TamilName = "இரத்தினபுரி"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Kegalle",
                            ProvinceId = 9,
                            SinhalaName = "කෑගල්ල",
                            TamilName = "கேகாலை"
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SinhalaName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TamilName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Borella",
                            SinhalaName = "බොරැල්ල",
                            TamilName = "பொரெல்ல",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Colombo Central",
                            SinhalaName = "කොළඹ මධ්‍යම",
                            TamilName = "மத்திய கொழும்பு",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Colombo North",
                            SinhalaName = "කොළඹ උතුර",
                            TamilName = "வட கொழும்பு",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Colombo South",
                            SinhalaName = "කොළඹ දකුණ",
                            TamilName = "தெற்கு கொழும்பு",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hanwella",
                            SinhalaName = "හාන්වැල්ල",
                            TamilName = "ஹான்வெல்ல",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Homagama",
                            SinhalaName = "හෝමාගම",
                            TamilName = "ஹோமாகம",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Padukka",
                            SinhalaName = "පඩුක්ක",
                            TamilName = "பதுக்கா",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dehiwala",
                            SinhalaName = "දෙහිවල",
                            TamilName = "தேஹிவளை",
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kesbewa",
                            SinhalaName = "කැස්බෑව",
                            TamilName = "கெஸ்பேவ",
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Moratuwa",
                            SinhalaName = "මොරටුව",
                            TamilName = "மொறட்டுவ",
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "Kaduwela",
                            SinhalaName = "කඩුවෙල",
                            TamilName = "கடுவெல",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 12,
                            Name = "Kolonnawa",
                            SinhalaName = "කොළොන්නාව",
                            TamilName = "கொலன்னாவ",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 13,
                            Name = "Maharagama",
                            SinhalaName = "මහරගම",
                            TamilName = "மஹரகம",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 14,
                            Name = "Nugegoda",
                            SinhalaName = "නුගේගොඩ",
                            TamilName = "நுகேகொடா",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 15,
                            Name = "Attanagalla",
                            SinhalaName = "අත්තනගල්ල",
                            TamilName = "அத்தனகல்ல",
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Dompe (Weke)",
                            SinhalaName = "දොම්පේ (වේකේ)",
                            TamilName = "டொம்பே (வேக்கே)",
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 17,
                            Name = "Gampaha",
                            SinhalaName = "ගම්පහ",
                            TamilName = "கம்பஹா",
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 18,
                            Name = "Biyagama",
                            SinhalaName = "බියගම",
                            TamilName = "பியகம",
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kelaniya",
                            SinhalaName = "කැලණිය",
                            TamilName = "கெலனியா",
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 20,
                            Name = "Mahara",
                            SinhalaName = "මහර",
                            TamilName = "மஹர",
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 21,
                            Name = "Wattala",
                            SinhalaName = "වත්තල",
                            TamilName = "வட்டலா",
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 22,
                            Name = "Divulapitiya",
                            SinhalaName = "දිවුලපිටිය",
                            TamilName = "திவுலபிட்டிய",
                            ZoneId = 7
                        },
                        new
                        {
                            Id = 23,
                            Name = "Meerigama",
                            SinhalaName = "මීරිගම",
                            TamilName = "மீரிகம",
                            ZoneId = 7
                        },
                        new
                        {
                            Id = 24,
                            Name = "Minuwangoda",
                            SinhalaName = "මිනුවන්ගොඩ",
                            TamilName = "மினுவாங்கொட",
                            ZoneId = 7
                        },
                        new
                        {
                            Id = 25,
                            Name = "Ja-Ela",
                            SinhalaName = "ජා-ඇල",
                            TamilName = "ஜா-எல",
                            ZoneId = 8
                        },
                        new
                        {
                            Id = 26,
                            Name = "Katana",
                            SinhalaName = "කටාන",
                            TamilName = "கடானா",
                            ZoneId = 8
                        },
                        new
                        {
                            Id = 27,
                            Name = "Negombo",
                            SinhalaName = "නිකඹො",
                            TamilName = "நிகம்போ",
                            ZoneId = 8
                        },
                        new
                        {
                            Id = 28,
                            Name = "Bandaragama",
                            SinhalaName = "බණ්ඩාරගම",
                            TamilName = "பண்டாரகம",
                            ZoneId = 9
                        },
                        new
                        {
                            Id = 29,
                            Name = "Bulathsinhala",
                            SinhalaName = "බුලත්සිංහල",
                            TamilName = "புலத்சிங்கள",
                            ZoneId = 9
                        },
                        new
                        {
                            Id = 30,
                            Name = "Horana",
                            SinhalaName = "හොරණ",
                            TamilName = "ஹோரனா",
                            ZoneId = 9
                        },
                        new
                        {
                            Id = 31,
                            Name = "Beruwala",
                            SinhalaName = "බේරුවල",
                            TamilName = "பேருவலா",
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 32,
                            Name = "Dodangoda",
                            SinhalaName = "දොඩංගොඩ",
                            TamilName = "தொடங்கோட",
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 33,
                            Name = "Kalutara",
                            SinhalaName = "කළුතර",
                            TamilName = "களுத்துறை",
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 34,
                            Name = "Panadura",
                            SinhalaName = "පානදුර",
                            TamilName = "பாணதுரை",
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 35,
                            Name = "Agalawatta",
                            SinhalaName = "අගලවත්ත",
                            TamilName = "அகலவத்த",
                            ZoneId = 11
                        },
                        new
                        {
                            Id = 36,
                            Name = "Matugama",
                            SinhalaName = "මතුගම",
                            TamilName = "மதுகம",
                            ZoneId = 11
                        },
                        new
                        {
                            Id = 37,
                            Name = "Palindanuwara",
                            SinhalaName = "පාලිඳනුවර",
                            TamilName = "பாலிந்தனுவர",
                            ZoneId = 11
                        },
                        new
                        {
                            Id = 38,
                            Name = "Walallawita",
                            SinhalaName = "වලල්ලවිට",
                            TamilName = "வலல்லவிட",
                            ZoneId = 11
                        },
                        new
                        {
                            Id = 39,
                            Name = "Udunuwara",
                            SinhalaName = "උඩුනුවර",
                            TamilName = "உடுநுவர",
                            ZoneId = 12
                        },
                        new
                        {
                            Id = 40,
                            Name = "Yatinuwara",
                            SinhalaName = "යටිනුවර",
                            TamilName = "யடிநுவர",
                            ZoneId = 12
                        },
                        new
                        {
                            Id = 41,
                            Name = "Ganga Ihala Korale",
                            SinhalaName = "ගංගා ඉහල කොරලේ",
                            TamilName = "கங்கா இஹலா கொரலே",
                            ZoneId = 13
                        },
                        new
                        {
                            Id = 42,
                            Name = "Pasbage Korale",
                            SinhalaName = "පස්බාගේ කොරලේ",
                            TamilName = "பச்பகே கொரலே",
                            ZoneId = 13
                        },
                        new
                        {
                            Id = 43,
                            Name = "Udapalatha",
                            SinhalaName = "උඩපාලත",
                            TamilName = "உடபாலத",
                            ZoneId = 13
                        },
                        new
                        {
                            Id = 44,
                            Name = "Gangawata Korale",
                            SinhalaName = "ගංගාවට කොරලේ",
                            TamilName = "கங்காவட்ட கொரலே",
                            ZoneId = 14
                        },
                        new
                        {
                            Id = 45,
                            Name = "Pathahewaheta",
                            SinhalaName = "පතහේවාහේට",
                            TamilName = "பதஹேவஹேட்ட",
                            ZoneId = 14
                        },
                        new
                        {
                            Id = 46,
                            Name = "Akurana",
                            SinhalaName = "අකුරණ",
                            TamilName = "அகுரண",
                            ZoneId = 15
                        },
                        new
                        {
                            Id = 47,
                            Name = "Galagedara",
                            SinhalaName = "ගලගෙදර",
                            TamilName = "கலகெதர",
                            ZoneId = 15
                        },
                        new
                        {
                            Id = 48,
                            Name = "Harispattuwa",
                            SinhalaName = "හරිස්පත්තුව",
                            TamilName = "ஹரிஸ்பத்துவ",
                            ZoneId = 15
                        },
                        new
                        {
                            Id = 49,
                            Name = "Hatharaliyadda",
                            SinhalaName = "හතරලියද්ද",
                            TamilName = "ஹதரலியதத",
                            ZoneId = 15
                        },
                        new
                        {
                            Id = 50,
                            Name = "Poojapitiya",
                            SinhalaName = "පූජාපිටිය",
                            TamilName = "பூஜாபிடிய",
                            ZoneId = 15
                        },
                        new
                        {
                            Id = 51,
                            Name = "Medadumbara",
                            SinhalaName = "මැදදුම්බර",
                            TamilName = "மெதடும்பர",
                            ZoneId = 16
                        },
                        new
                        {
                            Id = 52,
                            Name = "Minipe",
                            SinhalaName = "මිනිපේ",
                            TamilName = "மினிபே",
                            ZoneId = 16
                        },
                        new
                        {
                            Id = 53,
                            Name = "Ududumbara",
                            SinhalaName = "උඩුදුම්බර",
                            TamilName = "உடுடும்பர",
                            ZoneId = 16
                        },
                        new
                        {
                            Id = 54,
                            Name = "Kundasale",
                            SinhalaName = "කුන්දසාලෙ",
                            TamilName = "குந்தசாலே",
                            ZoneId = 17
                        },
                        new
                        {
                            Id = 55,
                            Name = "Panvila",
                            SinhalaName = "පන්විල",
                            TamilName = "பன்விலா",
                            ZoneId = 17
                        },
                        new
                        {
                            Id = 56,
                            Name = "Pathadumbara",
                            SinhalaName = "පාතදුම්බර",
                            TamilName = "பாததும்பர",
                            ZoneId = 17
                        },
                        new
                        {
                            Id = 57,
                            Name = "Dambulla",
                            SinhalaName = "දඹුල්ල",
                            TamilName = "தம்புள்ள",
                            ZoneId = 18
                        },
                        new
                        {
                            Id = 58,
                            Name = "Galewela",
                            SinhalaName = "ගලේවල",
                            TamilName = "கலேவலா",
                            ZoneId = 18
                        },
                        new
                        {
                            Id = 59,
                            Name = "Pallepola",
                            SinhalaName = "පල්ලෙපොල",
                            TamilName = "பலலெபொல",
                            ZoneId = 18
                        },
                        new
                        {
                            Id = 60,
                            Name = "Matale",
                            SinhalaName = "මාතලේ",
                            TamilName = "மாத்தலே",
                            ZoneId = 19
                        },
                        new
                        {
                            Id = 61,
                            Name = "Rattota",
                            SinhalaName = "රත්තොට",
                            TamilName = "ரதொட்ட",
                            ZoneId = 19
                        },
                        new
                        {
                            Id = 62,
                            Name = "Ukuwela",
                            SinhalaName = "උකුවෙල",
                            TamilName = "உகுவல",
                            ZoneId = 19
                        },
                        new
                        {
                            Id = 63,
                            Name = "Yatawatta",
                            SinhalaName = "යටවත්ත",
                            TamilName = "யடவட்ட",
                            ZoneId = 19
                        },
                        new
                        {
                            Id = 64,
                            Name = "Ambanganga Korale",
                            SinhalaName = "අම්බන්ගංග කොරලේ",
                            TamilName = "அம்பங்கங்கா கொரலே",
                            ZoneId = 20
                        },
                        new
                        {
                            Id = 65,
                            Name = "Naula",
                            SinhalaName = "නාවුල",
                            TamilName = "நௌலா",
                            ZoneId = 20
                        },
                        new
                        {
                            Id = 66,
                            Name = "Laggala",
                            SinhalaName = "ලග්ගල",
                            TamilName = "லக்கலா",
                            ZoneId = 21
                        },
                        new
                        {
                            Id = 67,
                            Name = "Wilgamuwa",
                            SinhalaName = "විල්ගමුව",
                            TamilName = "வில்கமுவ",
                            ZoneId = 21
                        },
                        new
                        {
                            Id = 68,
                            Name = "Udahewaheta",
                            SinhalaName = "උඩහේවාහැට",
                            TamilName = "உடஹேவஹெட்ட",
                            ZoneId = 22
                        },
                        new
                        {
                            Id = 69,
                            Name = "Ambagamuwa",
                            SinhalaName = "අම්බගමුව",
                            TamilName = "அம்பகமுவ",
                            ZoneId = 23
                        },
                        new
                        {
                            Id = 70,
                            Name = "Hatton Tamil - I",
                            SinhalaName = "හැටන් දෙමළ - I",
                            TamilName = "ஹட்டன் தமிழ் - I",
                            ZoneId = 23
                        },
                        new
                        {
                            Id = 71,
                            Name = "Hatton Tamil - II",
                            SinhalaName = "හැටන් දෙමළ - II",
                            TamilName = "ஹட்டன் தமிழ் - II",
                            ZoneId = 23
                        },
                        new
                        {
                            Id = 72,
                            Name = "Hatton Tamil - III",
                            SinhalaName = "හැටන් දෙමළ - III",
                            TamilName = "ஹட்டன் தமிழ் - III",
                            ZoneId = 23
                        },
                        new
                        {
                            Id = 73,
                            Name = "Kotmale",
                            SinhalaName = "කොත්මලේ",
                            TamilName = "கொத்மலே",
                            ZoneId = 24
                        },
                        new
                        {
                            Id = 74,
                            Name = "Nuwara Eliya",
                            SinhalaName = "නුවර එළිය",
                            TamilName = "நுவரெலியா",
                            ZoneId = 25
                        },
                        new
                        {
                            Id = 75,
                            Name = "Nuwara Eliya Tamil-1",
                            SinhalaName = "නුවරඑළිය දෙමළ - 1",
                            TamilName = "நுவரெலியா தமிழ் - 1",
                            ZoneId = 25
                        },
                        new
                        {
                            Id = 76,
                            Name = "Nuwara Eliya Tamil-2",
                            SinhalaName = "නුවරඑළිය දෙමළ - 2",
                            TamilName = "நுவரெலியா தமிழ் - 2",
                            ZoneId = 25
                        },
                        new
                        {
                            Id = 77,
                            Name = "Nuwara Eliya Tamil-3",
                            SinhalaName = "නුවරඑළිය දෙමළ - 3",
                            TamilName = "நுவரெலியா தமிழ் - 3",
                            ZoneId = 25
                        },
                        new
                        {
                            Id = 78,
                            Name = "Walapane",
                            SinhalaName = "වලපනේ",
                            TamilName = "வலபனே",
                            ZoneId = 26
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("IetfTag")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Code = "si",
                            IetfTag = "si-LK",
                            Name = "Sinhala"
                        },
                        new
                        {
                            Code = "ta",
                            IetfTag = "ta-LK",
                            Name = "Tamil"
                        },
                        new
                        {
                            Code = "en",
                            IetfTag = "en-UK",
                            Name = "English"
                        },
                        new
                        {
                            Code = "ar",
                            IetfTag = "ar-SA",
                            Name = "Arabic"
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BcNo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNo")
                        .HasColumnType("longtext");

                    b.Property<string>("NicNo")
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PassportNo")
                        .HasColumnType("longtext");

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "123, Kandy",
                            BcNo = "111",
                            DateOfBirth = new DateOnly(2000, 1, 1),
                            Email = "admin@system.com",
                            FullName = "System Admin",
                            MobileNo = "0000000000",
                            NicNo = "1111111111",
                            Nickname = "Admin",
                            Sex = (byte)9,
                            ShortName = "System"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "61/3, Napana, Gunnepana",
                            BcNo = "123",
                            DateOfBirth = new DateOnly(1993, 3, 19),
                            Email = "nifraz@live.com",
                            FullName = "Nifraz Navahz",
                            MobileNo = "0712319319",
                            NicNo = "930793922V",
                            Nickname = "Nifraz",
                            Sex = (byte)1,
                            ShortName = "Nifraz"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "61/3, Napana, Gunnepana",
                            BcNo = "123",
                            DateOfBirth = new DateOnly(1962, 3, 19),
                            Email = "ayesha@live.com",
                            FullName = "Ayesha Rauf",
                            MobileNo = "0776791138",
                            Nickname = "Ayesha",
                            Sex = (byte)2,
                            ShortName = "Ayesha"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "61/3, Napana, Gunnepana",
                            BcNo = "123",
                            DateOfBirth = new DateOnly(1952, 3, 19),
                            Email = "navahz@gmail.com",
                            FullName = "Mohamad Navahz",
                            MobileNo = "0756825831",
                            Nickname = "Navahz",
                            Sex = (byte)1,
                            ShortName = "Navahz"
                        },
                        new
                        {
                            Id = 5L,
                            Address = "123, Madawala Bazaar",
                            BcNo = "123",
                            DateOfBirth = new DateOnly(1980, 3, 19),
                            Email = "nisry@gmail.com",
                            FullName = "Nisry Ahamed",
                            MobileNo = "0770808306",
                            Nickname = "Nisry",
                            Sex = (byte)1,
                            ShortName = "Nisry"
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.PersonQualification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("AwardedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<byte>("QualificationId")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PersonId");

                    b.HasIndex("QualificationId");

                    b.ToTable("PersonQualifications");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.PersonRelationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChildPersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("ParentPersonId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ParentToChildRelationship")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ChildPersonId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("ParentPersonId");

                    b.ToTable("PersonRelationships");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Principal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Principals");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PersonId = 5L
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SinhalaName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TamilName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Western",
                            SinhalaName = "බස්නාහිර",
                            TamilName = "மேற்கு"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Central",
                            SinhalaName = "මධ්‍යම",
                            TamilName = "மத்திய"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Southern",
                            SinhalaName = "දකුණු",
                            TamilName = "தெற்கு"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Northern",
                            SinhalaName = "උතුරු",
                            TamilName = "வடக்கு"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Eastern",
                            SinhalaName = "නැගෙනහිර",
                            TamilName = "கிழக்கு"
                        },
                        new
                        {
                            Id = 6,
                            Name = "North Western",
                            SinhalaName = "වයඹ",
                            TamilName = "வடமேற்கு"
                        },
                        new
                        {
                            Id = 7,
                            Name = "North Central",
                            SinhalaName = "උතුරුමැද",
                            TamilName = "வடமத்திய"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Uva",
                            SinhalaName = "ඌව",
                            TamilName = "ஊவா"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sabaragamuwa",
                            SinhalaName = "සබරගමුව",
                            TamilName = "சபரகமுவா"
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Qualification", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CensusNo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("longtext");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CensusNo")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LastModifiedUserId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "GUNNEPANA",
                            CensusNo = "03270",
                            DivisionId = 56,
                            Name = "AL-AQSA MUS.V",
                            Type = (byte)3
                        },
                        new
                        {
                            Id = 2L,
                            Address = "MADAWALA BAZAAR",
                            CensusNo = "03263",
                            DivisionId = 56,
                            Name = "MADINA N S",
                            Type = (byte)1
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolPrincipalEnrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("PrincipalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PrincipalId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolPrincipalEnrollments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            No = 123,
                            PrincipalId = 1L,
                            SchoolId = 1L,
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolStudentEnrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SchoolStudentEnrollmentRequestId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolStudentEnrollmentRequestId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("SchoolStudentEnrollments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            No = 622,
                            SchoolId = 1L,
                            Status = (byte)2,
                            StudentId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            No = 13336,
                            SchoolId = 2L,
                            Status = (byte)4,
                            StudentId = 1L
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolStudentEnrollmentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AcademicYearYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearYear");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolStudentEnrollmentRequests");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolTeacherEnrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RemovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SchoolTeacherEnrollments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            No = 123,
                            SchoolId = 1L,
                            Status = (byte)5,
                            TeacherId = 1L
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolTeacherEnrollmentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolTeacherEnrollmentRequests");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PersonId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            PersonId = 3L
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("longtext");

                    b.Property<string>("ServiceGrade")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PersonId = 3L
                        },
                        new
                        {
                            Id = 2L,
                            PersonId = 4L
                        },
                        new
                        {
                            Id = 3L,
                            PersonId = 5L
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EmailOtpExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailVerificationOtp")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMobileNoVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MobileNoOtpExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MobileNoVerificationOtp")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsEmailVerified = false,
                            IsMobileNoVerified = false,
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$YUZxdRLjzR89fJVJ9Clq1g$KOuRwAyRuoL79jF9roL7v0aY/8cDQK+pqCuf6WyyOC0",
                            PersonId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsEmailVerified = false,
                            IsMobileNoVerified = false,
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$4CWmqtW6JsAohs2csG+o8A$pyaHDcgZ/T/vhn/gdYSkQDQugeebPFWdvCCyekOUYwY",
                            PersonId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsEmailVerified = false,
                            IsMobileNoVerified = false,
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$35lgVAvbVdxeWXprj/2Tlg$7hUM/Clbp2eFxyBm6/KO+iollGcbMQ6CkHsrK+UJiv0",
                            PersonId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsEmailVerified = false,
                            IsMobileNoVerified = false,
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$WtZKooLTWX6Ju8J/q+dMBw$/X6kr6Qmo/WGL4GRtl9FRFr7dD5TgfEzH4RGi3lplQ4",
                            PersonId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsEmailVerified = false,
                            IsMobileNoVerified = false,
                            Password = "$argon2id$v=19$m=65536,t=3,p=1$En5snC2JqAfe2dlFfCLqbg$Dv0TiU+k5JgvqwyJZeWu/oyhH2KcOPuEc3NF+zuAt9s",
                            PersonId = 5L
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SinhalaName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TamilName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictId = 1,
                            Name = "Colombo Zone",
                            SinhalaName = "කොළඹ කලාපය",
                            TamilName = "கொழும்பு வலயம்"
                        },
                        new
                        {
                            Id = 2,
                            DistrictId = 1,
                            Name = "Homagama Zone",
                            SinhalaName = "හෝමාගම කලාපය",
                            TamilName = "ஹோமாகம வலயம்"
                        },
                        new
                        {
                            Id = 3,
                            DistrictId = 1,
                            Name = "Piliyandala Zone",
                            SinhalaName = "පිළියන්දල කලාපය",
                            TamilName = "பிலியந்தல வலயம்"
                        },
                        new
                        {
                            Id = 4,
                            DistrictId = 1,
                            Name = "Sri Jayawardenapura Zone",
                            SinhalaName = "ශ්‍රී ජයවර්ධනපුර කලාපය",
                            TamilName = "ஸ்ரீ ஜயவர்த்தனபுர வலயம்"
                        },
                        new
                        {
                            Id = 5,
                            DistrictId = 2,
                            Name = "Gampaha Zone",
                            SinhalaName = "ගම්පහ කලාපය",
                            TamilName = "கம்பஹா வலயம்"
                        },
                        new
                        {
                            Id = 6,
                            DistrictId = 2,
                            Name = "Kelaniya Zone",
                            SinhalaName = "කැලණිය කලාපය",
                            TamilName = "கெலனியா வலயம்"
                        },
                        new
                        {
                            Id = 7,
                            DistrictId = 2,
                            Name = "Minuwangoda Zone",
                            SinhalaName = "මිනුවන්ගොඩ කලාපය",
                            TamilName = "மினுவாங்கொட வலயம்"
                        },
                        new
                        {
                            Id = 8,
                            DistrictId = 2,
                            Name = "Negombo Zone",
                            SinhalaName = "නිකඹා කලාපය",
                            TamilName = "நிகம்போ வலயம்"
                        },
                        new
                        {
                            Id = 9,
                            DistrictId = 3,
                            Name = "Horana Zone",
                            SinhalaName = "හොරණ කලාපය",
                            TamilName = "ஹோரனா வலயம்"
                        },
                        new
                        {
                            Id = 10,
                            DistrictId = 3,
                            Name = "Kalutara Zone",
                            SinhalaName = "කළුතර කලාපය",
                            TamilName = "களுத்துறை வலயம்"
                        },
                        new
                        {
                            Id = 11,
                            DistrictId = 3,
                            Name = "Matugama Zone",
                            SinhalaName = "මතුගම කලාපය",
                            TamilName = "மதுகம வலயம்"
                        },
                        new
                        {
                            Id = 12,
                            DistrictId = 4,
                            Name = "Denuwara Zone",
                            SinhalaName = "දෙනුවර කලාපය",
                            TamilName = "தெனுவர வலயம்"
                        },
                        new
                        {
                            Id = 13,
                            DistrictId = 4,
                            Name = "Gampola Zone",
                            SinhalaName = "ගම්පොල කලාපය",
                            TamilName = "கம்பொலா வலயம்"
                        },
                        new
                        {
                            Id = 14,
                            DistrictId = 4,
                            Name = "Kandy Zone",
                            SinhalaName = "මහනුවර කලාපය",
                            TamilName = "கண்டி வலயம்"
                        },
                        new
                        {
                            Id = 15,
                            DistrictId = 4,
                            Name = "Katugastota Zone",
                            SinhalaName = "කටුගස්තොට කලාපය",
                            TamilName = "கட்டுகஸ்தோட்ட வலயம்"
                        },
                        new
                        {
                            Id = 16,
                            DistrictId = 4,
                            Name = "Teldeniya Zone",
                            SinhalaName = "තෙල්දෙණිය කලාපය",
                            TamilName = "தெல்தெணிய வலயம்"
                        },
                        new
                        {
                            Id = 17,
                            DistrictId = 4,
                            Name = "Wattegama Zone",
                            SinhalaName = "වත්තේගම කලාපය",
                            TamilName = "வத்தேகம வலயம்"
                        },
                        new
                        {
                            Id = 18,
                            DistrictId = 5,
                            Name = "Galewala Zone",
                            SinhalaName = "ගලේවල කලාපය",
                            TamilName = "கலேவலா வலயம்"
                        },
                        new
                        {
                            Id = 19,
                            DistrictId = 5,
                            Name = "Matale Zone",
                            SinhalaName = "මාතලේ කලාපය",
                            TamilName = "மாத்தலே வலயம்"
                        },
                        new
                        {
                            Id = 20,
                            DistrictId = 5,
                            Name = "Naula Zone",
                            SinhalaName = "නාවුල කලාපය",
                            TamilName = "நௌலா வலயம்"
                        },
                        new
                        {
                            Id = 21,
                            DistrictId = 5,
                            Name = "Wilgamuwa Zone",
                            SinhalaName = "විල්ගමුව කලාපය",
                            TamilName = "வில்கமுவ வலயம்"
                        },
                        new
                        {
                            Id = 22,
                            DistrictId = 6,
                            Name = "Hanguranketha Zone",
                            SinhalaName = "හඟුරන්කෙත කලාපය",
                            TamilName = "ஹங்குரன்கெத வலயம்"
                        },
                        new
                        {
                            Id = 23,
                            DistrictId = 6,
                            Name = "Hatton Zone",
                            SinhalaName = "හැටන් කලාපය",
                            TamilName = "ஹட்டன் வலயம்"
                        },
                        new
                        {
                            Id = 24,
                            DistrictId = 6,
                            Name = "Kotmale Zone",
                            SinhalaName = "කොත්මලේ කලාපය",
                            TamilName = "கொத்மலே வலயம்"
                        },
                        new
                        {
                            Id = 25,
                            DistrictId = 6,
                            Name = "Nuwara Eliya Zone",
                            SinhalaName = "නුවර එළිය කලාපය",
                            TamilName = "நுவரெலியா வலயம்"
                        },
                        new
                        {
                            Id = 26,
                            DistrictId = 6,
                            Name = "Walapane Zone",
                            SinhalaName = "වලපනේ කලාපය",
                            TamilName = "வலபனே வலயம்"
                        });
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Class", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedClasses")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Language", "Language")
                        .WithMany("Classes")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedClasses")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("Language");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.ClassStudentEnrollment", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.AcademicYear", "AcademicYear")
                        .WithMany("ClassStudentEnrollments")
                        .HasForeignKey("AcademicYearYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.Class", "Class")
                        .WithMany("ClassStudentEnrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedClassStudentEnrollments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedClassStudentEnrollments")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedClassStudentEnrollments")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.SchoolStudentEnrollment", "SchoolStudentEnrollment")
                        .WithMany("ClassStudentEnrollments")
                        .HasForeignKey("SchoolStudentEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Class");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("SchoolStudentEnrollment");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.ClassTeacherEnrollment", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.AcademicYear", "AcademicYear")
                        .WithMany("ClassTeacherEnrollments")
                        .HasForeignKey("AcademicYearYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.Class", "Class")
                        .WithMany("ClassTeacherEnrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedClassTeacherClassEnrollments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedClassTeacherClassEnrollments")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedClassTeacherClassEnrollments")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.SchoolTeacherEnrollment", "SchoolTeacherEnrollment")
                        .WithMany("TeacherClassEnrollments")
                        .HasForeignKey("SchoolTeacherEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Class");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("SchoolTeacherEnrollment");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.District", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Division", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.Zone", "Zone")
                        .WithMany("Divisions")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Person", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedPersons")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedPersons")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedPersons")
                        .HasForeignKey("LastModifiedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.PersonQualification", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedPersonQualifications")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedPersonQualifications")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedPersonQualifications")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.Qualification", "Qualification")
                        .WithMany("PersonQualifications")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Person");

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.PersonRelationship", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.Person", "ChildPerson")
                        .WithMany("ChildRelationships")
                        .HasForeignKey("ChildPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedPersonRelationships")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedPersonRelationships")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedPersonRelationships")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "ParentPerson")
                        .WithMany("ParentRelationships")
                        .HasForeignKey("ParentPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildPerson");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("ParentPerson");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Principal", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedPrincipals")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedPrincipals")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedPrincipals")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "Person")
                        .WithOne("Principal")
                        .HasForeignKey("SmartSchool.Schema.Entities.Principal", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.School", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedSchools")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedSchools")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Division", "Division")
                        .WithMany("Schools")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedSchools")
                        .HasForeignKey("LastModifiedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("Division");

                    b.Navigation("LastModifiedUser");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolPrincipalEnrollment", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedSchoolPrincipalEnrollments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedSchoolPrincipalEnrollments")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedSchoolPrincipalEnrollments")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Principal", "Principal")
                        .WithMany("SchoolPrincipalEnrollments")
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.School", "School")
                        .WithMany("SchoolPrincipalEnrollments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Principal");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolStudentEnrollment", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedSchoolStudentEnrollments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedSchoolStudentEnrollments")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedSchoolStudentEnrollments")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.School", "School")
                        .WithMany("SchoolStudentEnrollments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.SchoolStudentEnrollmentRequest", "SchoolStudentEnrollmentRequest")
                        .WithOne("SchoolStudentEnrollment")
                        .HasForeignKey("SmartSchool.Schema.Entities.SchoolStudentEnrollment", "SchoolStudentEnrollmentRequestId");

                    b.HasOne("SmartSchool.Schema.Entities.Student", "Student")
                        .WithMany("SchoolStudentEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("School");

                    b.Navigation("SchoolStudentEnrollmentRequest");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolStudentEnrollmentRequest", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedSchoolStudentEnrollmentRequests")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedSchoolStudentEnrollmentRequests")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedSchoolStudentEnrollmentRequests")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "Person")
                        .WithMany("SchoolStudentEnrollmentRequests")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.School", "School")
                        .WithMany("SchoolStudentEnrollmentRequests")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Person");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolTeacherEnrollment", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedSchoolTeacherEnrollments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedSchoolTeacherEnrollments")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedSchoolTeacherEnrollments")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.School", "School")
                        .WithMany("SchoolTeacherEnrollments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.Teacher", "Teacher")
                        .WithMany("SchoolTeacherEnrollments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolTeacherEnrollmentRequest", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedSchoolTeacherEnrollmentRequests")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedSchoolTeacherEnrollmentRequests")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedSchoolTeacherEnrollmentRequests")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "Person")
                        .WithMany("SchoolTeacherEnrollmentRequests")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Schema.Entities.School", "School")
                        .WithMany("SchoolTeacherEnrollmentRequests")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Person");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Student", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedStudents")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedStudents")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedStudents")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "Person")
                        .WithOne("Student")
                        .HasForeignKey("SmartSchool.Schema.Entities.Student", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Teacher", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedTeachers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedTeachers")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedTeachers")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "Person")
                        .WithOne("Teacher")
                        .HasForeignKey("SmartSchool.Schema.Entities.Teacher", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.User", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "DeletedUser")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.User", "LastModifiedUser")
                        .WithMany("LastModifiedUsers")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("SmartSchool.Schema.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("LastModifiedUser");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Zone", b =>
                {
                    b.HasOne("SmartSchool.Schema.Entities.District", "District")
                        .WithMany("Zones")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.AcademicYear", b =>
                {
                    b.Navigation("ClassStudentEnrollments");

                    b.Navigation("ClassTeacherEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Class", b =>
                {
                    b.Navigation("ClassStudentEnrollments");

                    b.Navigation("ClassTeacherEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.District", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Division", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Language", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Person", b =>
                {
                    b.Navigation("ChildRelationships");

                    b.Navigation("ParentRelationships");

                    b.Navigation("Principal");

                    b.Navigation("SchoolStudentEnrollmentRequests");

                    b.Navigation("SchoolTeacherEnrollmentRequests");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Principal", b =>
                {
                    b.Navigation("SchoolPrincipalEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Qualification", b =>
                {
                    b.Navigation("PersonQualifications");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolPrincipalEnrollments");

                    b.Navigation("SchoolStudentEnrollmentRequests");

                    b.Navigation("SchoolStudentEnrollments");

                    b.Navigation("SchoolTeacherEnrollmentRequests");

                    b.Navigation("SchoolTeacherEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolStudentEnrollment", b =>
                {
                    b.Navigation("ClassStudentEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolStudentEnrollmentRequest", b =>
                {
                    b.Navigation("SchoolStudentEnrollment");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.SchoolTeacherEnrollment", b =>
                {
                    b.Navigation("TeacherClassEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Student", b =>
                {
                    b.Navigation("SchoolStudentEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Teacher", b =>
                {
                    b.Navigation("SchoolTeacherEnrollments");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.User", b =>
                {
                    b.Navigation("CreatedClassStudentEnrollments");

                    b.Navigation("CreatedClassTeacherClassEnrollments");

                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedPersonQualifications");

                    b.Navigation("CreatedPersonRelationships");

                    b.Navigation("CreatedPersons");

                    b.Navigation("CreatedPrincipals");

                    b.Navigation("CreatedSchoolPrincipalEnrollments");

                    b.Navigation("CreatedSchoolStudentEnrollmentRequests");

                    b.Navigation("CreatedSchoolStudentEnrollments");

                    b.Navigation("CreatedSchoolTeacherEnrollmentRequests");

                    b.Navigation("CreatedSchoolTeacherEnrollments");

                    b.Navigation("CreatedSchools");

                    b.Navigation("CreatedStudents");

                    b.Navigation("CreatedTeachers");

                    b.Navigation("CreatedUsers");

                    b.Navigation("DeletedClassStudentEnrollments");

                    b.Navigation("DeletedClassTeacherClassEnrollments");

                    b.Navigation("DeletedClasses");

                    b.Navigation("DeletedPersonQualifications");

                    b.Navigation("DeletedPersonRelationships");

                    b.Navigation("DeletedPersons");

                    b.Navigation("DeletedPrincipals");

                    b.Navigation("DeletedSchoolPrincipalEnrollments");

                    b.Navigation("DeletedSchoolStudentEnrollmentRequests");

                    b.Navigation("DeletedSchoolStudentEnrollments");

                    b.Navigation("DeletedSchoolTeacherEnrollmentRequests");

                    b.Navigation("DeletedSchoolTeacherEnrollments");

                    b.Navigation("DeletedSchools");

                    b.Navigation("DeletedStudents");

                    b.Navigation("DeletedTeachers");

                    b.Navigation("DeletedUsers");

                    b.Navigation("LastModifiedClassStudentEnrollments");

                    b.Navigation("LastModifiedClassTeacherClassEnrollments");

                    b.Navigation("LastModifiedClasses");

                    b.Navigation("LastModifiedPersonQualifications");

                    b.Navigation("LastModifiedPersonRelationships");

                    b.Navigation("LastModifiedPersons");

                    b.Navigation("LastModifiedPrincipals");

                    b.Navigation("LastModifiedSchoolPrincipalEnrollments");

                    b.Navigation("LastModifiedSchoolStudentEnrollmentRequests");

                    b.Navigation("LastModifiedSchoolStudentEnrollments");

                    b.Navigation("LastModifiedSchoolTeacherEnrollmentRequests");

                    b.Navigation("LastModifiedSchoolTeacherEnrollments");

                    b.Navigation("LastModifiedSchools");

                    b.Navigation("LastModifiedStudents");

                    b.Navigation("LastModifiedTeachers");

                    b.Navigation("LastModifiedUsers");
                });

            modelBuilder.Entity("SmartSchool.Schema.Entities.Zone", b =>
                {
                    b.Navigation("Divisions");
                });
#pragma warning restore 612, 618
        }
    }
}
